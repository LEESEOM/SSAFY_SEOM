Framework
웹 애플리케이션을 빠르게 개발할 수 있도록 도와주는 도구
(개발에 필요한 기본 구조, 규칙, 라이브러리 등을 제공)

Framework를 사용하는 이유
1. 기본 틀을 제공하므로 핵심 개발에 집중 가능
2. 여러 라이브러리를 제공하여 개발속도(생산성) 향상
3. 유지보수와 확장에 용이 > 소프트웨어 품질 높임

가상환경
애플리케이션과 그에 따른 패키지들을 격리하여 관리하는 독립적인 실행 환경

가상환경을 사용하는 이유
1. 의존성 관리 - 라이브러리 및 패키지를 각 프로젝트마다 독립적으로 사용 가능
2. 팀 프로젝트 협업 - 모두가 동일한 환경과 의존성 위에서 작업하여 버전간 충돌 방지

LTS(Long-Term Support)
프레임워크나 라이브러리 등의 소프트웨어에서 장기간 지원되는 안정적인 버전

MVC (Model, View, Controller)
애플리케이션을 구조화하는 대표적인 패턴
(데이터, 사용자 인터페이스, 비즈니스 로직을 분리)

MTV (Model, Template, View) < 이름만 바뀜
Model 
- 데이터와 관련된 로직을 관리
- 응용프로그램의 데이터 구조를 정의하고 데이터베이스의 기록을 관리
Template
- 레이아웃과 화면을 처리
- 화면상의 사용자 인터페이스 구조와 레이아웃을 정의
View
- Model & Template와 관련한 로직을 처리해서 응답을 반환
- 클라이언트의 요청에 대해 처리를 분기하는 역할
예시 model에서 데이터 가져옴 > template로 보내 화면 구성 > 응답으로 만들어 반환

DTL (Django Template Language)
Template에서 조건, 반복, 변수 등의 프로그래밍적 기능을 제공

Variable Routing
URL 일부에 변수를 포함시키는 것
(변수는 view 함수의 인자로 전달할 수 있음)

App URL mapping
각 앱에 URL을 정의하는 것
프로젝트와 각 앱이 URL을 나누어 관리를 편하게 하기 위함

Naming URL patterns
URL에 이름을 지정하는 것
(path 함수의 name 인자를 정의해서 사용)

Trailing Slashes
Django는 URL끝에 '/'가 없다면 자동으로 붙임
있고 없고는 다른 URL이므로 혼동을 피하기 위해 붙이기로 결정함

0914부터
